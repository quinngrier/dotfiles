#! /bin/sh -
#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#
# This script is written in portable shell.
#

LC_ALL=C
readonly LC_ALL
export LC_ALL

gpg2=${GPG2_COMMAND-gpg2}
readonly gpg2

parse_options=:
unset name
unset value

case $# in 0)
  set x
;; *)
  set x "$@"
esac

until shift && (exit ${1+1}0); do

  if $parse_options; then

    #-------------------------------------------------------------------
    # Options terminator
    #-------------------------------------------------------------------

    case $1 in --)

      parse_options=false
      continue

    ;; --=*)

      printf '%s\n' "$0: Option forbids an argument: --" >&2
      exit 1

    #-------------------------------------------------------------------
    # --help
    #-------------------------------------------------------------------

    ;; --help)

      cat <<'EOF' || exit $?
Usage: gpgsec <name> [<value>]

Manages GPG-encrypted secrets in the ~/.gpgsec directory.

If <value> is nonempty, it will be encrypted and written to the
~/.gpgsec/<name>.gpg file. Otherwise, if <value> is empty, the file will
be deleted. Otherwise, if <value> is omitted, the file will be decrypted
and written to standard output.

<name> may freely contain directory components, allowing secrets to be
organized into directories. For tab completion convenience, <name> may
optionally be prefixed with "~/.gpgsec/" and suffixed with ".gpg".

If <value> is "-", it will be read from standard input.

gpg2 must already be installed and a default-key must already be set up
in the ~/.gnupg/gpg.conf file. The --default-recipient-self option will
be used when encrypting.
EOF

      exit 0

    ;; --help=*)

      printf '%s\n' "$0: Option forbids an argument: --help" >&2
      exit 1

    #-------------------------------------------------------------------
    # Unknown options
    #-------------------------------------------------------------------

    ;; --*)

      printf '%s' "$0: Unknown option: " >&2
      sed -n '
        /=/ {
          s/=.*//
          p
          q
        }
        p
      ' <<EOF >&2
$1
EOF
      exit 1

    ;; -?*)

      printf '%s: Unknown option: %.2s\n' "$0" "$1" >&2
      exit 1

    #-------------------------------------------------------------------

    esac
  fi

  if ${name+false} :; then

    name=$1

  elif ${value+false} :; then

    value=$1

  else

    printf '%s\n' "$0: too many operands: $1" >&2
    exit 1

  fi

done

readonly parse_options
readonly name
readonly value

if ${name+false} :; then
  printf '%s\n' "$0: <name> must be given" >&2
  exit 1
fi

case $name in
  .. | ../* | */../* | */..)
    cat <<'EOF' >&2
gpgsec: invalid <name>
EOF
    exit 1
  ;;
esac

file=$name
case $file in
  "$HOME"/.gpgsec/*)
    :
  ;;
  *)
    file=$HOME/.gpgsec/$file
  ;;
esac
case $file in
  *.gpg)
    :
  ;;
  *)
    file=$file.gpg
  ;;
esac
readonly file

if ${value+false} :; then
  log=${file?}.$$.log
  exec 3>"${log?}" || exit $?
  eval " $gpg2 -q -d --logger-fd 3" <"$file" || exit $?
  rm "${log?}" >/dev/null 2>/dev/null
  exit 0
fi

case $value in
  '')
    if command -v shred >/dev/null; then
      shred "$file"
    fi
    rm -f "$file" || exit $?
    exit 0
  ;;
esac

umask 077 || exit $?

if test -f "$file"; then
  :
else
  mkdir -p "$file" || exit $?
  rmdir "$file" || exit $?
fi

x='-q -a --default-recipient-self -e -s'
case $value in
  -)
    eval " $gpg2 $x" >"$file" || exit $?
  ;;
  *)
    eval " $gpg2 $x" >"$file" <<EOF || exit $?
$value
EOF
  ;;
esac

exit 0
