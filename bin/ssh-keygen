#! /bin/sh -
#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#
# This script wraps ssh-keygen with the following modifications:
#
#    1. The -f option is modified to always accept "-" to mean
#       standard input. If "-f -" is used in a context where a
#       normal file would be updated in-place, the update is
#       discarded (except if the new --f option is also given).
#       If -f is bundled after other short options, such as in
#       "ssh-keygen -yf -", it is not handled.
#
#    2. A new option, --f, may be given. If it is given without
#       the -f option, it has no effect. Otherwise, the normal
#       standard output is discarded and the content of the -f
#       file is output instead (after any in-place update).
#

# :r !subset.sh gatbps_barf gatbps_parse_opt gatbps_unknown_opt

#-----------------------------------------------------------------------
# gatbps_barf
#-----------------------------------------------------------------------
#
# The authors of this function have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

gatbps_barf() {

  case $# in 0)

    printf '%s\n' "$0: Error: Unknown error." >&2

  ;; 1)

    printf '%s\n' "$0: Error: ${1?}" >&2

  ;; *)

    printf '%s' "$0: Error: ${1?}" >&2
    shift
    printf ' %s' "$@" >&2
    echo >&2

  esac

  exit 1

}

#-----------------------------------------------------------------------
# gatbps_parse_opt
#-----------------------------------------------------------------------
#
# The authors of this function have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

gatbps_parse_opt() {

  case $# in 0)
    gatbps_barf \
      "gatbps_parse_opt(): At least one <option> must be given." \
    ;
  esac

  case ${1?} in -? | --*)
    gatbps_parse_opt_prefix=
  ;; *)
    gatbps_parse_opt_prefix=${1?}
    case ${gatbps_parse_opt_prefix?} in *[!0-9A-Z_a-z]* | [0-9]*)
      gatbps_barf \
        "gatbps_parse_opt(): Invalid <prefix>: " \
        "${gatbps_parse_opt_prefix?}" \
      ;
    esac
    shift
  esac

  case $# in 0)
    gatbps_barf \
      "gatbps_parse_opt(): At least one <option> must be given." \
    ;
  esac

  gatbps_parse_opt_opts_n=0
  while :; do
    case $# in 0)
      break
    esac
    case ${1?} in -? | --*)
      eval gatbps_parse_opt_opts_${gatbps_parse_opt_opts_n?}='${1?}'
      gatbps_parse_opt_opts_n=`
        expr ${gatbps_parse_opt_opts_n?} + 1
      ` || exit $?
      shift
    ;; *)
      break
    esac
  done

  case ${gatbps_parse_opt_opts_n?} in 0)
    gatbps_barf \
      "gatbps_parse_opt(): At least one <option> must be given." \
    ;
  esac

  case $# in 0)
    gatbps_barf \
      "gatbps_parse_opt(): The argument list must be given." \
    ;
  esac

  case ${1?} in required | forbidden | permitted)
    gatbps_parse_opt_style=${1?}
    shift
  ;; *)
    gatbps_parse_opt_style=required
  esac

  case $# in 0)
    gatbps_barf \
      "gatbps_parse_opt(): The argument list must be given." \
    ;
  esac

  case ${1?} in :)
    shift
  ;; *)
    gatbps_barf \
      "gatbps_parse_opt(): Unexpected argument: ${1?}" \
    ;
  esac

  gatbps_parse_opt_opts_i=0

  while :; do

    case ${gatbps_parse_opt_opts_i?} in ${gatbps_parse_opt_opts_n?})
      break
    esac

    case $# in 0)
      break
    esac

    eval gatbps_parse_opt_opt=\$gatbps_parse_opt_opts_${gatbps_parse_opt_opts_i?}

    case ${1?} in "${gatbps_parse_opt_opt?}")
      eval ${gatbps_parse_opt_prefix?}got=:
      eval ${gatbps_parse_opt_prefix?}opt='${gatbps_parse_opt_opt?}'
      case ${gatbps_parse_opt_style?} in required)
        case $# in 1)
          sst_barf \
            "Option requires an argument: ${gatbps_parse_opt_opt?}" \
          ;
        esac
        eval ${gatbps_parse_opt_prefix?}arg='${2?}'
        eval ${gatbps_parse_opt_prefix?}pop=shift
      ;; *)
        unset ${gatbps_parse_opt_prefix?}arg
        eval ${gatbps_parse_opt_prefix?}pop=
      esac
      return
    esac

    case ${gatbps_parse_opt_opt?} in --*)

      case ${1?} in "${gatbps_parse_opt_opt?}"=*)
        case ${gatbps_parse_opt_style?} in forbidden)
          sst_barf \
            "Option forbids an argument: ${gatbps_parse_opt_opt?}" \
          ;
        esac
        gatbps_parse_opt_x='
          {
            if (seen_equals) {
              print;
            } else if (/=/) {
              seen_equals = 1;
              sub(/[^=]*=/, "");
              print;
            }
          }
        '
        gatbps_parse_opt_x=`eval " ${AWK:-awk}"' \
          "${gatbps_parse_opt_x?}" \
          <<gatbps_parse_opt_eof
${1?}
gatbps_parse_opt_eof
        '` || exit $?
        eval ${gatbps_parse_opt_prefix?}got=:
        eval ${gatbps_parse_opt_prefix?}opt='${gatbps_parse_opt_opt?}'
        eval ${gatbps_parse_opt_prefix?}arg='${gatbps_parse_opt_x?}'
        eval ${gatbps_parse_opt_prefix?}pop=
        return
      esac

    ;; *)

      case ${1?} in "${gatbps_parse_opt_opt?}"*)
        case ${gatbps_parse_opt_opt?} in '-
')
          gatbps_parse_opt_x='
            1 d
            s/'\''/&\\&&/g
            2 s/^/'\''/
            $ s/$/'\''/
          '
        ;; *)
          gatbps_parse_opt_x='
            1 s/^..//
            s/'\''/&\\&&/g
            1 s/^/'\''/
            $ s/$/'\''/
          '
        esac
        gatbps_parse_opt_x=`eval " ${SED:-sed}"' \
          "${gatbps_parse_opt_x?}" \
          <<gatbps_parse_opt_eof
${1?}
gatbps_parse_opt_eof
        '` || exit $?
        eval ${gatbps_parse_opt_prefix?}got=:
        eval ${gatbps_parse_opt_prefix?}opt='${gatbps_parse_opt_opt?}'
        case ${gatbps_parse_opt_style?} in forbidden)
          unset ${gatbps_parse_opt_prefix?}arg
          eval ${gatbps_parse_opt_prefix?}pop=\"'
            shift
            set x -${gatbps_parse_opt_x?} \"\$@\"
          '\"
        ;; *)
          eval ${gatbps_parse_opt_prefix?}arg=${gatbps_parse_opt_x?}
          eval ${gatbps_parse_opt_prefix?}pop=
        esac
        return
      esac

    esac

    gatbps_parse_opt_opts_i=`
      expr ${gatbps_parse_opt_opts_i?} + 1
    ` || exit $?

  done

  eval ${gatbps_parse_opt_prefix?}got=false
  unset ${gatbps_parse_opt_prefix?}opt
  unset ${gatbps_parse_opt_prefix?}arg
  eval ${gatbps_parse_opt_prefix?}pop=

}

#-----------------------------------------------------------------------
# gatbps_unknown_opt
#-----------------------------------------------------------------------
#
# The authors of this function have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

gatbps_unknown_opt() {

  case $# in 1)
    :
  ;; *)
    gatbps_barf \
      "gatbps_unknown_opt(): Exactly one argument must be given." \
    ;
  esac

  case ${1?} in --*)

    printf '%s' "$0: Unknown option: " >&2

    sed '
      /=/ {
        s/=.*//
        q
      }
    ' <<gatbps_unknown_opt_eof >&2
${1?}
gatbps_unknown_opt_eof

    exit 1

  ;; -?*)

    printf '%s: Unknown option: %.2s\n' "$0" "${1?}" >&2

    exit 1

  esac

}

#-----------------------------------------------------------------------

remove_home_bin='
  s|:'$HOME'/bin||g
  s|^'$HOME'/bin:||
  s|^'$HOME'/bin$||
'
readonly remove_home_bin

PATH_WITHOUT_HOME_BIN=`
  LC_ALL=C eval " ${SED:-sed}"' "$remove_home_bin"' <<EOF
$PATH
EOF
` || exit $?
readonly PATH_WITHOUT_HOME_BIN

ssh_keygen=`
  PATH=$PATH_WITHOUT_HOME_BIN command -v ssh-keygen
` || exit $?
readonly ssh_keygen

#-----------------------------------------------------------------------

unset f
output_f=false

case $# in 0)
  set x
;; *)
  set x "$@"
esac
n=$#
parse_options=:
while :; do
  shift
  case $n in 1)
    break
  esac

  if $parse_options; then

    gatbps_parse_opt -- forbidden : "$@"
    if $got; then
      eval "$pop"
      set x "$@" --
      shift
      parse_options=false
      n=`expr $n - 1` || exit $?
      continue
    fi

    gatbps_parse_opt -f required : "$@"
    if $got; then
      k=$#
      eval "$pop"
      f=$arg
      n=`expr $n - '(' $k - $# ')'` || exit $?
      continue
    fi

    gatbps_parse_opt --f forbidden : "$@"
    if $got; then
      eval "$pop"
      output_f=:
      n=`expr $n - 1` || exit $?
      continue
    fi

  fi

  set x "$@" "$1"
  shift
  n=`expr $n - 1` || exit $?

done

readonly output_f

case ${f+x} in x)

  case $f in -)
    f=`mktemp` || exit $?
    case $f in '' | /* | ./*)
      :
    ;; *)
      f=./$f
    esac
    trap '
      if command -v shred >/dev/null 2>&1; then
        shred "$f" || :
      fi
      rm "$f" || :
    ' EXIT
    cat >"$f" || exit $?
  ;; '' | /* | ./*)
    :
  ;; *)
    f=./$f
  esac
  readonly f

  if $output_f; then
    case $# in 0)
      "$ssh_keygen" -f "$f" >/dev/null || exit $?
    ;; *)
      "$ssh_keygen" -f "$f" "$@" >/dev/null || exit $?
    esac
    cat "$f" || exit $?
  else
    case $# in 0)
      "$ssh_keygen" -f "$f" || exit $?
    ;; *)
      "$ssh_keygen" -f "$f" "$@" || exit $?
    esac
  fi

;; *)

  case $# in 0)
    "$ssh_keygen" || exit $?
  ;; *)
    "$ssh_keygen" "$@" || exit $?
  esac

esac
