#! /bin/bash -

#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

#
# Usage: tts [<word>...]
#
# Converts text to speech and plays it.
#
# If at least one <word> is given, the input is the space-separated
# concatenation of the <word>s. Otherwise, the input is read from
# standard input.
#
# By default, this script will try to find and use the best text to
# speech engine you have available. You can also pick the engine by
# setting the TTS_ENGINE environment variable.
#
# The supported text to speech engines are as follows:
#
#    dotnet
#
#       This is the SpeechSynthesizer class from .NET.
#
#       If you're on Windows and don't have TTS_ENGINE set, this
#       engine will always be tried as a last resort.
#
#    kokoro
#
#       This is <https://github.com/hexgrad/kokoro>.
#

set -E -e -u -o pipefail || exit $?
trap exit ERR

declare -r -x LC_ALL=C

case ${1-} in -*)
  printf '%s\n' "Options are not supported yet." >&2
  exit 1
esac

#-----------------------------------------------------------------------
# Read the input text
#-----------------------------------------------------------------------

join_lines='
  {
    if ($0) {
      if (buf) {
        buf = buf " ";
      }
      buf = buf $0;
    } else if (buf) {
      print buf;
      buf = "";
    }
  }
  END {
    if (buf) {
      print buf;
    }
  }
'
readonly join_lines

if (($# == 0)); then
  input=$(awk "$join_lines")
else
  input=$(awk "$join_lines" <<<"$@")
fi

#-----------------------------------------------------------------------

if [[ ! ${TTS_HAVE_DOCKER+x} ]]; then
  TTS_HAVE_DOCKER=0
  if command -v docker &>/dev/null; then
    TTS_HAVE_DOCKER=1
  fi
fi
readonly TTS_HAVE_DOCKER

if [[ ! ${TTS_DOCKER_GPUS+x} ]]; then
  TTS_DOCKER_GPUS=
  if ((TTS_HAVE_DOCKER)); then
    if docker run --rm --gpus all hello-world &>/dev/null; then
      TTS_DOCKER_GPUS='--gpus all'
    fi
  fi
fi
readonly TTS_DOCKER_GPUS

if [[ ${WINDIR+x} && ! ${AUDIODRIVER+x} ]]; then
  AUDIODRIVER=waveaudio
  readonly AUDIODRIVER
  export AUDIODRIVER
  if [[ ! ${TTS_RIGHT_PAD+x} ]]; then
    TTS_RIGHT_PAD='pad 0 1'
  fi
fi

if [[ ! ${TTS_RIGHT_PAD+x} ]]; then
  TTS_RIGHT_PAD=
fi
readonly TTS_RIGHT_PAD

export DOCKER_CLI_HINTS=false

#-----------------------------------------------------------------------
# kokoro
#-----------------------------------------------------------------------

if [[ ${TTS_ENGINE-} == kokoro || $TTS_HAVE_DOCKER == 1 ]]; then

  docker build -q -t tts-kokoro:0.9.4 - <<<'
    FROM python:3.10
    RUN apt-get -q -y update
    RUN apt-get -q -y install espeak-ng
    RUN pip install kokoro==0.9.4 soundfile
    RUN printf '\''%s\n'\'' \
      '\''from kokoro import KPipeline'\'' \
      '\''pipeline = KPipeline(lang_code="a")'\'' \
      '\''generator = pipeline("hello", voice="af_heart")'\'' \
      '\''for i, (gs, ps, audio) in enumerate(generator):'\'' \
      '\''  pass'\'' \
      >init.py \
    ;
    RUN python init.py
    RUN printf '\''%s\n'\'' \
      '\''from kokoro import KPipeline'\'' \
      '\''import soundfile as sf'\'' \
      '\''import sys'\'' \
      '\''pipeline = KPipeline(lang_code="a")'\'' \
      '\''generator = pipeline(sys.stdin.read(), voice="af_heart")'\'' \
      '\''with open("tmp.raw", "wb") as raw:'\'' \
      '\''  for i, (gs, ps, audio) in enumerate(generator):'\'' \
      '\''    sf.write(raw, audio,'\'' \
      '\''      closefd=False,'\'' \
      '\''      format="RAW",'\'' \
      '\''      samplerate=24000,'\'' \
      '\''      subtype="PCM_16",'\'' \
      '\''    )'\'' \
      >run.py \
    ;
  ' >/dev/null

  f1() {
    docker run \
      $TTS_DOCKER_GPUS \
      --network none \
      --rm \
      --stop-timeout 0 \
      -i \
      tts-kokoro:0.9.4 \
      sh -c 'python run.py >/dev/null 2>/dev/null && cat tmp.raw' \
      <<<"$@" \
    ;
  }

  f1 "$input" | play \
    --bits 16 \
    --channels 1 \
    --encoding signed-integer \
    --endian little \
    --no-show-progress \
    --norm \
    --rate 24000 \
    --type .raw \
    -V1 \
    - \
    $TTS_RIGHT_PAD \
  ;

  exit

fi

#-----------------------------------------------------------------------
# .NET
#-----------------------------------------------------------------------

if [[ ${TTS_ENGINE-} == dotnet || \
      ( ! ${TTS_ENGINE+x} && ${WINDIR+x} ) ]]; then

  x='
    BEGIN {
      q = "'\''";
    }
    {
      if (NR > 1) {
        printf "%s", " + \"`r`n\" + "
      }
      gsub(/'\''/, q q);
      printf "%s", q $0 q;
    }
  '
  case $# in 0)
    input=$(awk "$input")
  ;; *)
    input=$(awk "$input" <<<"$*")
  esac

  unset pid
  trap '
    case ${pid-} in *?)
      kill -s INT $pid || :
    esac
  ' INT
  PowerShell -Command - <<EOF &
Add-Type -AssemblyName System.Speech;
(New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak($input);
EOF
  pid=$!
  wait $pid

  exit

fi

#-----------------------------------------------------------------------

printf '%s\n' "No text to speech engine found." >&2
exit 1
