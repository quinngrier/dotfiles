#! /bin/bash -

#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#

#
# Usage: tts [<word>...]
#
# Converts text to speech.
#
# If at least one <word> is given, the input is the space-separated
# concatenation of the <word>s. Otherwise, the input is read from
# standard input.
#
# By default, this script will try to find and use the best text to
# speech engine you have available. To use a specific engine, set the
# TTS_ENGINE environment variable to one of the engines detailed below.
#
# By default, the speech is played aloud using your sound card. To save
# it to a WAV file instead, set the TTS_OUTFILE environment variable to
# a file path. To output the WAV file to standard output instead, set
# TTS_OUTFILE to "-".
#
# Unless otherwise stated, all engines convert text to speech locally,
# without accessing the internet. However, the first time you use an
# engine, it may need to run a one-time build process that requires
# internet access.
#
# The supported engines are as follows:
#
#    chatterbox
#
#       This is <https://github.com/resemble-ai/chatterbox>.
#
#    dotnet
#
#       This is the SpeechSynthesizer class from .NET.
#
#       If you're on Windows and don't have TTS_ENGINE set, this
#       engine will always be tried as a last resort.
#
#    kokoro
#
#       This is <https://github.com/hexgrad/kokoro>.
#

set -E -e -u -o pipefail || exit $?
trap exit ERR

declare -r -x LC_ALL=C

case ${1-} in -*)
  printf '%s\n' "Options are not supported yet." >&2
  exit 1
esac

on_cygwin=0
if command -v cygcheck &>/dev/null; then
  on_cygwin=1
fi
readonly on_cygwin

#-----------------------------------------------------------------------
# Read the input text
#-----------------------------------------------------------------------

join_lines='
  {
    if ($0) {
      if (buf) {
        buf = buf " ";
      }
      buf = buf $0;
    } else if (buf) {
      print buf;
      buf = "";
    }
  }
  END {
    if (buf) {
      print buf;
    }
  }
'
readonly join_lines

if (($# == 0)); then
  input=$(awk "$join_lines")
else
  input=$(awk "$join_lines" <<<"$@")
fi

#-----------------------------------------------------------------------

if [[ ! ${TTS_HAVE_DOCKER+x} ]]; then
  TTS_HAVE_DOCKER=0
  if command -v docker &>/dev/null; then
    TTS_HAVE_DOCKER=1
  fi
fi
readonly TTS_HAVE_DOCKER

if [[ ! ${TTS_DOCKER_GPUS+x} ]]; then
  TTS_DOCKER_GPUS=
  if [[ $TTS_HAVE_DOCKER == 1 ]]; then
    if docker run --rm --gpus all hello-world &>/dev/null; then
      TTS_DOCKER_GPUS='--gpus all'
    fi
  fi
fi
readonly TTS_DOCKER_GPUS

if [[ ${WINDIR+x} && ! ${AUDIODRIVER+x} ]]; then
  AUDIODRIVER=waveaudio
  readonly AUDIODRIVER
  export AUDIODRIVER
fi

#-----------------------------------------------------------------------
# chatterbox
#-----------------------------------------------------------------------

if [[ ${TTS_ENGINE-} == chatterbox ]]; then

  if [[ ! $TTS_DOCKER_GPUS ]]; then
    printf '%s\n' "$0: TTS_ENGINE=chatterbox requires TTS_DOCKER_GPUS." >&2
    exit 1
  fi

  x=$(docker images -q tts-chatterbox)
  if [[ ! $x ]]; then
    docker build -t tts-chatterbox.tmp - <<<'
      FROM python:3.9
      RUN pip install chatterbox-tts==0.1.1
      RUN printf '\''%s\n'\'' \
        '\''from chatterbox.tts import ChatterboxTTS'\'' \
        '\''from contextlib import redirect_stdout'\'' \
        '\''import os'\'' \
        '\''import sys'\'' \
        '\''text = sys.stdin.read()'\'' \
        '\''with open(os.devnull, "w") as f, redirect_stdout(f):'\'' \
        '\''  model = ChatterboxTTS.from_pretrained(device="cuda")'\'' \
        '\''  speech = model.generate(text, cfg_weight=0.3)'\'' \
        '\''speech = speech.cpu().numpy().tobytes()'\'' \
        '\''sys.stdout.buffer.write(speech)'\'' \
        >/run.py \
      ;
    ' >&2
    docker rm -f tts-chatterbox.tmp
    docker run \
      $TTS_DOCKER_GPUS \
      --name tts-chatterbox.tmp \
      --stop-timeout 0 \
      -i \
      tts-chatterbox.tmp \
      python /run.py \
      <<<"hello" \
      >/dev/null \
    ;
    docker commit tts-chatterbox.tmp tts-chatterbox
    docker rm tts-chatterbox.tmp
    docker rmi tts-chatterbox.tmp
  fi

  pid=

  trap '
    if [[ $pid ]]; then
      if ((on_cygwin)); then
        /bin/kill -f $pid || :
      fi
    fi
  ' SIGINT

  if [[ ${TTS_OUTFILE+x} ]]; then
    x1='--type wav --'
    x2=$TTS_OUTFILE
  else
    x1=
    x2=--default-device
  fi

  docker run \
    $TTS_DOCKER_GPUS \
    --network none \
    --rm \
    --stop-timeout 0 \
    -i \
    tts-chatterbox \
    python /run.py \
    <<<"$input" \
    2>/dev/null \
  | sox \
    --no-show-progress \
    --norm \
    --rate 24000 \
    --type .f32 \
    -V1 \
    - \
    $x1 \
    "$x2" \
  &

  pid=$!

  wait $pid

  exit

fi

#-----------------------------------------------------------------------
# kokoro
#-----------------------------------------------------------------------

if [[ ${TTS_ENGINE-} == kokoro || $TTS_HAVE_DOCKER == 1 ]]; then

  x=$(docker images -q tts-kokoro:0.9.4)
  if [[ ! $x ]]; then
    docker build -t tts-kokoro:0.9.4 - <<<'
      FROM python:3.10
      RUN apt-get -q -y update
      RUN apt-get -q -y install espeak-ng
      RUN pip install kokoro==0.9.4 numpy
      RUN printf '\''%s\n'\'' \
        '\''from kokoro import KPipeline'\'' \
        '\''pipeline = KPipeline(lang_code="a")'\'' \
        '\''generator = pipeline("hello",'\'' \
        '\''  speed=1.25,'\'' \
        '\''  voice="af_heart",'\'' \
        '\'')'\'' \
        '\''for i, (gs, ps, audio) in enumerate(generator):'\'' \
        '\''  pass'\'' \
        >/init.py \
      ;
      RUN python /init.py
      RUN printf '\''%s\n'\'' \
        '\''from kokoro import KPipeline'\'' \
        '\''import numpy as np'\'' \
        '\''import sys'\'' \
        '\''pipeline = KPipeline(lang_code="a")'\'' \
        '\''generator = pipeline(sys.stdin.read(),'\'' \
        '\''  speed=1.25,'\'' \
        '\''  voice="af_heart",'\'' \
        '\'')'\'' \
        '\''for i, (gs, ps, audio) in enumerate(generator):'\'' \
        '\''  audio_np = np.asarray(audio, dtype=np.float32)'\'' \
        '\''  sys.stdout.buffer.write(audio_np.tobytes())'\'' \
        >/run.py \
      ;
    ' >&2
  fi

  pid=

  trap '
    if [[ $pid ]]; then
      if ((on_cygwin)); then
        /bin/kill -f $pid || :
      fi
    fi
  ' SIGINT

  if [[ ${TTS_OUTFILE+x} ]]; then
    x1='--type wav --'
    x2=$TTS_OUTFILE
  else
    x1=
    x2=--default-device
  fi

  docker run \
    $TTS_DOCKER_GPUS \
    --network none \
    --rm \
    --stop-timeout 0 \
    -i \
    tts-kokoro:0.9.4 \
    python /run.py \
    <<<"$input" \
    2>/dev/null \
  | sox \
    --no-show-progress \
    --norm \
    --rate 24000 \
    --type .f32 \
    -V1 \
    - \
    $x1 \
    "$x2" \
  &

  pid=$!

  wait $pid

  exit

fi

#-----------------------------------------------------------------------
# .NET
#-----------------------------------------------------------------------

if [[ ${TTS_ENGINE-} == dotnet || \
      ( ! ${TTS_ENGINE+x} && ${WINDIR+x} ) ]]; then

  if [[ ${TTS_OUTFILE+x} ]]; then
    printf '%s\n' "TTS_OUTFILE is not supported for this engine yet." >&2
    exit 1
  fi

  x='
    BEGIN {
      q = "'\''";
    }
    {
      if (NR > 1) {
        printf "%s", " + \"`r`n\" + "
      }
      gsub(/'\''/, q q);
      printf "%s", q $0 q;
    }
  '
  case $# in 0)
    input=$(awk "$input")
  ;; *)
    input=$(awk "$input" <<<"$*")
  esac

  unset pid
  trap '
    case ${pid-} in *?)
      kill -s INT $pid || :
    esac
  ' INT
  PowerShell -Command - <<EOF &
Add-Type -AssemblyName System.Speech;
(New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak($input);
EOF
  pid=$!
  wait $pid

  exit

fi

#-----------------------------------------------------------------------

printf '%s\n' "No text to speech engine found." >&2
exit 1
