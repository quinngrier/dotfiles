#! /bin/sh -
#
# The authors of this file have waived all copyright and
# related or neighboring rights to the extent permitted by
# law as described by the CC0 1.0 Universal Public Domain
# Dedication. You should have received a copy of the full
# dedication along with this file, typically as a file
# named <CC0-1.0.txt>. If not, it may be available at
# <https://creativecommons.org/publicdomain/zero/1.0/>.
#
# This script is written in portable shell.
#

LC_ALL=C
readonly LC_ALL
export LC_ALL

files='
  .bash_profile
  .bashrc
  .gitattributes
  .gitconfig
  .inputrc
  .mailmap
  .minttyrc
  .screenrc
  .ssh/config
  .vimrc
  CC0-1.0.txt
  bin/adock
  bin/dr
  bin/git-c
  bin/git-d
  bin/git-u
  bin/git-ub
  bin/gpgqg
  bin/gpgqg-gpgsec
  bin/gpgqu
  bin/gpgsec
  bin/gpgsec-aws
  bin/jqbc
  bin/s
  bin/ssh-autokey
  bin/ssh-keygen
  bin/sshqg
  bin/sshqg-gpgsec
  bin/tfdata
  bin/tts
  deploy
  gitlab.gitconfig
  reg/classic-right-click.reg
  reg/disable-menu-show-delay.reg
  reg/open-cygwin-terminal-here.reg
  start/vim.bash
  start/vim.cmd
'
readonly files

case $0 in ./deploy)
  :
;; *)
  printf '%s\n' "$0: This script must only be run as ./deploy." >&2
  exit 1
esac

# Quotes stdin, less any single trailing newline character. An empty
# result may be literally empty instead of ''.
quote_script_1='
  s/'\''/&\\&&/g
  1 s/^/'\''/
  $ s/$/'\''/
'
readonly quote_script_1

# Quotes stdin, less any single trailing newline character, then less
# any single trailing non-newline character. An empty result may be
# literally empty instead of ''.
quote_script_2='
  s/'\''/&\\&&/g
  $ s/.\{0,1\}$/'\''/
  1 s/^/'\''/
'
readonly quote_script_2

make_tarball=:

parse_options=:

case $# in 0)
  set x
;; *)
  set x "$@"
esac

until shift && (exit ${1+1}0); do

  if $parse_options; then

    #-------------------------------------------------------------------
    # Options terminator
    #-------------------------------------------------------------------

    case $1 in --)

      parse_options=false
      continue

    ;; --=*)

      printf '%s\n' "$0: Option forbids an argument: --" >&2
      exit 1

    #-------------------------------------------------------------------
    # --help
    #-------------------------------------------------------------------

    ;; --help)

      cat <<'EOF' || exit $?
Usage: ./deploy [<dir>]...

Deploys the dotfiles to each <dir>. If <dir> contains a colon character,
it specifies a directory on a remote machine, where the text before the
last colon character is the ssh address, and the text after the last
colon character is the directory. If the text after the last colon
character is empty, it is adjusted to ".".

Examples:

      ./deploy ~   Deploys the dotfiles to your home directory.
      ./deploy x:  Deploys the dotfiles to your home directory
                   on the remote machine whose ssh address is x.
EOF

      exit 0

    ;; --help=*)

      printf '%s\n' "$0: Option forbids an argument: --help" >&2
      exit 1

    #-------------------------------------------------------------------
    # Unknown options
    #-------------------------------------------------------------------

    ;; --*)

      printf '%s' "$0: Unknown option: " >&2
      sed -n '
        /=/ {
          s/=.*//
          p
          q
        }
        p
      ' <<EOF >&2
$1
EOF
      exit 1

    ;; -?*)

      printf '%s: Unknown option: %.2s\n' "$0" "$1" >&2
      exit 1

    #-------------------------------------------------------------------

    esac
  fi

  if $make_tarball; then
    tar czf deploy.tar.gz $files
    make_tarball=false
  fi

  case $1 in *:*)

    # Set remote to be the text before the last colon character.
    x='\(.*:\)'
    x=`expr "$1" : "$x"` || exit $?
    x=`sed "$quote_script_2" <<EOF
$x
EOF
    ` || exit $?
    eval "remote=$x"

    # Set dst to be the text after the last colon character.
    x='.*:\(.*\)'
    x=`expr "$1." : "$x"` || exit $?
    x=`sed "$quote_script_2" <<EOF
$x
EOF
    ` || exit $?
    eval "dst=$x"

    # Adjust an empty dst to be ".", and a dst that does not begin
    # with "." or "/" to begin with "./".
    case $dst in '')
      dst=.
    ;; [./]*)
      :
    ;; *)
      dst=./$dst
    esac

    # Adjust dst to be a portably quoted shell string.
    dst=`sed "$quote_script_1" <<EOF
$dst
EOF
    ` || exit $?

    ssh "$remote" "
      mkdir -p $dst || exit $?
      cd $dst || exit $?
      tar xz || exit $?
      chmod -R go-rwx .ssh || exit $?
    " <deploy.tar.gz || exit $?

  ;; *)

    # Set dst to be the text verbatim.
    dst=$1

    # Leave an empty dst alone, and adjust a nonempty dst that does
    # not begin with "." or "/" to begin with "./".
    case $dst in '' | [./]*)
      :
    ;; *)
      dst=./$dst
    esac

    (
      mkdir -p "$dst" || exit $?
      cd "$dst" || exit $?
      tar xz || exit $?
      chmod -R go-rwx .ssh || exit $?
    ) <deploy.tar.gz || exit $?

  esac

done

if $make_tarball; then
  :
else
  rm deploy.tar.gz || exit $?
fi
